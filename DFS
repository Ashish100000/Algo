#include <iostream>
#include <vector>
#include <stack>
using namespace std;

void dfs(vector<vector<int>>& graph, int v, vector<bool>& visited) {
    // Mark the current node as visited and print it
    visited[v] = true;
    cout << v << " ";

    // Recur for all the vertices adjacent to this vertex
    for (int i = 0; i < graph[v].size(); ++i) {
        if (!visited[graph[v][i]]) {
            dfs(graph, graph[v][i], visited);
        }
    }
}

int main() {
    cout << "\n\nWelcome to Studytonight :-)\n\n\n";
    cout << " =====  Program to demonstrate the DFS Traversal on a Graph, in CPP  ===== \n\n";

    int n, e;
    cout << "Enter the number of vertices in the Graph: ";
    cin >> n;
    cout << "\nEnter the number of edges in the Graph : ";
    cin >> e;

    vector<vector<int>> graph(n);
    cout << "\nEnter the start and end vertex of the edges: \n";
    for (int k = 1; k <= e; k++) {
        int i, j;
        cin >> i >> j;
        graph[i].push_back(j);
        // For undirected graph uncomment below line
        // graph[j].push_back(i);
    }

    vector<bool> visited(n, false);
    cout << "\nEnter the initial vertex to start the DFS traversal with: ";
    int start;
    cin >> start;

    cout << "\nThe DFS traversal on the given graph is : \n";
    dfs(graph, start, visited);

    cout << "\n\n\n";
    return 0;
}
