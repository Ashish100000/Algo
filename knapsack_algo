#include <iostream>
#include <algorithm>

using namespace std;

struct Item {
    int weight;
    int value;
};

int knapsack(int W, const Item items[], int n) {
    int dp[n + 1][W + 1];

    cout << "DP array table:" << endl;
    cout << "\t";
    for (int w = 0; w <= W; ++w) {
        cout << "W=" << w << "\t";
    }
    cout << endl;
    for (int i = 0; i <= n; ++i) {
        cout << "Item " << i << "\t";
        for (int w = 0; w <= W; ++w) {
            if (i == 0 || w == 0) {
                dp[i][w] = 0;
            } else if (items[i - 1].weight <= w) {
                dp[i][w] = max(dp[i - 1][w], items[i - 1].value + dp[i - 1][w - items[i - 1].weight]);
            } else {
                dp[i][w] = dp[i - 1][w];
            }
            cout << dp[i][w] << "\t";
        }
        cout << endl;
    }
    cout << endl;

    return dp[n][W];
}

int main() {
    int n;
    cout << "Enter the number of items: ";
    cin >> n;

    Item items[n];
    for (int i = 0; i < n; ++i) {
        cout << "Enter weight and value of item " << i + 1 << ": ";
        cin >> items[i].weight >> items[i].value;
    }

    int W;
    cout << "Enter the knapsack capacity: ";
    cin >> W;

    cout << "Weight\tValue\tValue/Weight" << endl;
    for (int i = 0; i < n; ++i) {
        cout << items[i].weight << "\t" << items[i].value << "\t" << static_cast<double>(items[i].value) / items[i].weight << endl;
    }

    cout << "Maximum value that can be obtained: " << knapsack(W, items, n) << endl;

    return 0;
}
